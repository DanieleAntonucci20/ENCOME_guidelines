[["index.html", "ENCOME - Energy Conservation Measure Tool Chapter 1 About 1.1 How it works", " ENCOME - Energy Conservation Measure Tool Daniele Antonucci, Ulrich Filippi Oberegger, Olga Somova, Mattia Dallapiccola 2023-05-22 Chapter 1 About Increasing the energy efficiency of existing buildings is a priority from three different points of view: the environment, the security of energy supply and the quality of life of citizens. The renovation of existing buildings has a particularly high potential. It is therefore logical, from an economic and operational point of view, to implement appropriate energy saving measures when a building is renovated. The ENergy COnservation MEasure (ENCOME) tool developed by Eurac in different projects (MATRYCS, MODERATE, INFINITE) aims to evaluate the best trad-off between reduction of energy consumption of building and improving comfort, cost of interventions and de-risking in energy efficiency. 1.1 How it works Figure 1.1: Flow-chart of ENCOME tool The tool provides: BUILDING EMERGY SIMULATION the (sensible) energy need for heating and cooling, based on hourly or monthly calculations the internal temperature, based on hourly calculations; the sensible heating and cooling load, based on hourly calculations; trough the implementation of the ISO-52016:2017 calculation. The calculation methods can be used for residential or non-residential buildings, or a part of it, referred to as “the building” or the “assessed object”. BUILDING ENERGY OPTIMIZATION (ongoing) One of the main issue related to building energy simulation is the reduction of the gap between real data and simulated data The goal consists in the development of a calibration approach to reduce the differences between building simulation and real monitored data (performance gap) using a Particle Swarm Optimization tool and Genetic algorithm in dynamic building simulation. The tools works on some specific factor that affects the calculation of the energy consumption of the building such as the internal radiative and convective heat transfer coefficients. ENERGY CONSERVATION MEASUREs Based on the simulated and calibrated data, the tool provides the possibility to reduce the energy consumption of the building selecting different ECMs related to facade and energy systems. PV SIMULATION AND OPTIMIZATION TOOL …. "],["interface.html", "Chapter 2 Interface", " Chapter 2 Interface The interface consists mainly of 3 basic parts: The HEADER: Selecting the “user” icon a drop-down menu will be shown. Within the latter, the following functions can be accessed: Figure 2.1: ENCOME frontend interface General Home: return all home page Admin: link to the administrator page where user creation and management is possible. Only for administrator users. Components Walls: link to the database of the available opaque vertical components Roofs and Floors: link to the database of available opaque horizontal components Windows: link to the database of available transparent components Heat Loss Thermal Bridges: link to the abacus of thermal bridges Documentation Guide: link to the guidelines of the tool Logout: disconnection to the application The DRAWER: in the left drawer is it possible to visualize 4 main tool functionality: Home: Homepage of tool, where the list o buildings are visualized Building: Page with building cards, to be selected for system and building inputs Simulation: Page with building cards for simulations, calibration, and visualization of results ECM: Page of building to apply Energy Conservation Measures (ECMs). Facade and Systems: ECM applied to facade and systems. PV Systems: ECM of Photovoltaic. Where it is possible to simulate and optimize PV plan The MAIN PAGE: in the main page the outputs of the tool are visualized. "],["building.html", "Chapter 3 Building 3.1 Add new building 3.2 Buildings List 3.3 Audit page", " Chapter 3 Building Figure 3.1: User Buildings In the building page the user can visualize and mange all its buildings. 3.1 Add new building In order to create a new building the following information is required from the user: Building Name: name of the building Building Year: year of construction Building Typology: list of possible building typology (i.e. “school”, “residential”, “office”, etc.) Project Name: Name of the project to which the buildings belongs to. Simulation Name: the building can be simulated several times, if you want to save the different simulations you need to identify it during the creation of the building The user should place the building in the map. This step is important to connect the tool to the weather data (connection to PVGIS site https://re.jrc.ec.europa.eu/pvg_tools/en/ ) If the building is not placed in the map an error will come up. Figure 3.2: Error if building is not placed in a map during the creation 3.2 Buildings List In a specific page it is possible to visualize the list of buildings as cards, selecting one the Audit inputs is opened. Figure 3.3: List of buildings 3.3 Audit page In the audit page the user should provide inputs related to building and systems according to the ISO 52016. Th following 9 cards should be filled: 3.3.1 General In the general page a summary of the inputs provided during the creation of the building is shown. Figure 3.4: Audit - General Page 3.3.2 Geometry the following information should be provided: - Perimeter of the building [m]: it is the length, the linear measurement around an entire building in meter. - Slab-on-ground area: area of the building in contact to the ground in m2 - Wall thickness: Average thickness of the external walls in meter - Useful building area: total area of all enclosed spaces measured to the internal face of the external walls in in m2 - Building Volume: Volume of the building in in m3 - height: external height of the building in meter Figure 3.5: Geometry Page 3.3.3 Envelope In this tab all the information related to the properties of the Envelope should be provided. Opaque Vertical Components: For each building exposure it is necessary to select all type of opaque vertical component. The component is taken from a specific database provided by the tool and can be augmented with user-defined components. Access to the database can be done directly through the button below : “DB Wall Components” or through the user drop-down menu in the user section at the top of the header: Components -&gt; Walls Figure 3.6: Opaque Vertical Components Page Transparent Vertical Components: For each building exposure it is necessary to select all type of transparent vertical component. The component is taken from a specific database provided by the tool and can be augmented with user-defined components. Access to the database can be done directly through the button below : “DB Window Components” or through the user drop-down menu in the user section at the top of the header: Components -&gt; Windows Figure 3.7: Opaque Horizontal Components Page Opaque Horizontal Components: For each building exposure it is necessary to select all type of opaque horizontal component. The component is taken from a specific database provided by the tool and can be augmented with user-defined components. Access to the database can be done directly through the button below : “DB Floors/Roof” or through the user drop-down menu in the user section at the top of the header: Components -&gt; Roofs and Floors 3.3.4 Heating Heating - ISO52016 In the heating system 3 main inputs are required to the user for the calculation of the energy needs: Power: Maximum power of the generator Set-point: Internal (minimum intended) operative temperature for the calculation of the energy load or need for heating (i.e 21°C) Set-back: Temperature that the heating system will never fall below (i.e. 10°C) Figure 3.8: Inputs Heating ISO 52016 Heating - UNITS 11300 The tool calculates the primary energy using the simplified version of the UNI TS 11300. For this calculation the user should provide the efficiency of different subsystems characterizing the heating system (Generation, Distribution, Emission and control). Figure 3.9: Inputs Heating UNI TS 11300 3.3.5 Cooling Cooling - ISO52016 In the cooling system 3 main inputs are required to the user for the calculation of the energy needs: Power: Maximum power of the cooling generator Set-point: Internal (maximum intended) temperature for the calculation of the energy load or need for cooling (i.e 26°C) Set-back: Temperature that the cooling system will never overcome (i.e.30°C) Figure 3.10: Inputs Cooling ISO 52016 "],["deployment.html", "Chapter 4 Deployment 4.1 Prerequisites 4.2 NGINX configuration 4.3 Database configuration 4.4 Encome Front-end and Back-end 4.5 Notes", " Chapter 4 Deployment The current deployment strategy targets a server or virtual machine (VM) equipped with Docker. We use several Docker containers that communicate with each other via external Docker network. Actual production server is located at 193.106.181.3. Actual production database server is located at xdcren06.eurac.edu. Overview: Docker container with PostgreSQL database (not necessarily running on the same VM) Encome app: multiple Docker containers (front-end, back-end, celery, redis) Docker container with NGINX all containers(except database if running on external server) use the same Docker network. 4.1 Prerequisites In order to perform deployment procedure, you need a GitLab account and a Docker installed on your local machine. The project repository is located at https://gitlab.inf.unibz.it/eeb/infinite_bep_52016. Thereafter, all references to the folders are taken from the root folder of this project. 4.1.1 GitLab login We store all Docker images on GitLab registry, so you will need to log in. From GitLab, create new Project Access Token and note it somewhere (https://docs.gitlab.com/ee/user/project/settings/project_access_tokens.html). From local or server terminal run: docker login gitlab.inf.unibz.it:4567 Then use your GitLab username and Project Access Token to authenticate. 4.2 NGINX configuration Since all containers communicate on the same Docker network, we need to create it. First, connect to production server. From terminal run: ssh &lt;username&gt;@193.106.181.3 # Exsample: &#39;ssh osomova@193.106.181.3&#39; Create Docker network if not exists: docker network create nginx_network Copy ./nginx folder. From local terminal run: rsync -r ./nginx &lt;username&gt;@193.106.181.3:/home/&lt;username&gt;/ Move ./nginx folder to /home/tools.eeb/. From server terminal run: sudo mv nginx /home/tools.eeb/ Finally, start NGINX container. From server terminal cd into nginx and run: docker-compose up -d --build 4.2.1 Update NGINX In order to update NGINX configuration, from server terminal cd into /home/tools.eeb/nginx folder and run: docker-compose down Update configurations (synchronize nginx.conf). Finally, start container. From server terminal run: docker-compose up -d --build 4.3 Database configuration We use PostgreSQL database stored in Docker container. See MATRYCS_ECM/frontend/database_connection/readme.md Overview: Docker container with PostgreSQL database Docker container with Flask app used for database definition and migrations 4.3.1 Flask app In order to keep all database schema changes in version control, we use a flask app from ./iso52016_database/migrations_app. In models.py you can add/change/delete models corresponding to the database tables. See SQlAlchemy (https://docs.sqlalchemy.org/en/20/dialects/postgresql.html) Then, you can apply this changes to iso_52106 database: See Flask-Migrate (https://flask-migrate.readthedocs.io/en/latest/) This app will generate migration script that needs to be added to version control. 4.3.2 PostgreSQL database First, from local and server terminal log in to GitLab (4.1.1). Now, let’s build and push database image. From local terminal cd into ./iso52016_database/database and run: docker build -t gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/iso_52016:tag . docker push gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/iso_52016:tag Then, let’s build and push migration app image. From local terminal cd into ./iso52016_database/migration_app and run: docker build -t gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/iso_52016_app:tag . docker push gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/iso_52016_app:tag Where tag is defined as in 4.5.1 From ./iso52016_database folder you need to copy: scripts folder docker-compose.yml (if you run DB on same VM that other containers, add NGINX network) db.env file (change password to secure one) From local terminal cd into ./iso52016_database and run: rsync -r ./scripts &lt;username&gt;@xdcren06.eurac.edu:/home/&lt;username&gt;/iso52016_database/ rsync docker-compose.yml &lt;username&gt;@xdcren06.eurac.edu:/home/&lt;username&gt;/iso52016_database/ rsync db.env &lt;username&gt;@xdcren06.eurac.edu:/home/&lt;username&gt;/iso52016_database/ Move ./iso52016_database folder to /home/tools.eeb/iso52016_database and pull images. From server terminal run: sudo mv iso52016_database /home/tools.eeb/iso52016_database docker pull gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/iso_52016:tag docker pull gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/iso_52016_app:tag Finally, start Database container. From server terminal cd into ./iso52016_database and run: ./scripts/createdb.sh 4.3.3 Update Database In order to update database: From local terminal: log in to GitLab build and push iso_52016_app image From server terminal: log in to GitLab pull iso_52016_app image run update script: ./scripts/updatedb.sh 4.4 Encome Front-end and Back-end Now, we need to build Encome front-end and back-end images. First, from local and server terminal log in to GitLab (4.1.1). Then, we start to build Encome’s back-end. From local terminal cd into infinite_bep_52016/backend and run: docker build -t gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/encome-backend:tag . Build Encome’s front-end. From local terminal cd into MATRYCS_ECM/frontend and run: docker build -t gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/encome-frontend:tag . Where tag is defined as in 4.5.1 Once the images are ready, we can push them. From local terminal run: docker push gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/encome-backend:tag docker push gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/encome-frontend:tag Then, from production server pull all images: docker pull gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/encome-backend:tag docker pull gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/encome-frontend:tag From root folder we need to copy to server: docker-compose.yml .evn file (generate new secret key) So, run: rsync docker-compose.yml &lt;username&gt;@193.106.181.3:/home/&lt;username&gt;/ rsync .env &lt;username&gt;@193.106.181.3:/home/&lt;username&gt;/ Move this files to /home/tools.eeb/. From server terminal run: sudo mv docker-compose.yml /home/tools.eeb/ sudo mv .env /home/tools.eeb/ Make sure NGINX and database containers are running. Finally, start Encome containers. From server terminal cd into /home/tools.eeb and run: docker-compose up -d --build 4.4.1 Update Encome Front-end and Back-end In order to update Encome’s front-end or back-end: From local terminal: log in to GitLab build front-end or/and back-end image/s push image/s to GitLab From server terminal: log in to GitLab stop Encome running containers. From /home/tools.eeb run: docker-compose stop update tag in docker-compose.yml file finally, start containers. From /home/tools.eeb run: docker-compose up -d 4.5 Notes Some useful information. 4.5.1 Image Versioning All Docker images are tagged. The tag is defined as major.minor.bugfix. Example: 0.1.0 Thereafter, in all commands you have to replace ‘tag’ with the appropriate one. Example: New version contains bugfix, so tag changes from 1.2.6 to 1.2.7: # instead of # docker push gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/encome-backend:tag # you have to run docker push gitlab.inf.unibz.it:4567/eeb/infinite_bep_52016/encome-backend:1.2.7 4.5.2 Allocated Ports 80 -&gt; NGINX (to be moved to 443) 15432 -&gt; PostgreSQL database 8000 -&gt; Encome back-end 8050 -&gt; Encome front-end 5555 -&gt; Encome celery 6379 -&gt; Encome redis 8081 -&gt; Geoapp eebdatabase 5000 -&gt; Geoapp front-end 8086 -&gt; Geoapp back-end 8089 -&gt; GdynaApp "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
